#!/bin/sh
#
# pyflag daemon start/stop script.
#
# Debian version. Based on the original by TcX.
#
set -e
set -u
${DEBIAN_SCRIPT_DEBUG:+ set -v -x}

USER=pyflag

PYFLAG_RUNDIR=/var/run/pyflagd
PYFLAG_DATADIR=/var/lib/pyflag
PYFLAG_CFGDIR=/etc/pyflag
PYFLAG_UNIX_SOCKET=$PYFLAG_RUNDIR/pyflag.sock
DB_PID_FILE=$PYFLAG_RUNDIR/pyflagdb.pid
PYFLAG_LOG_FILE=/var/log/pyflag/pyflag.log
SELF=$(cd $(dirname $0); pwd -P)/$(basename $0)
CONF=/etc/mysql/my.cnf
MYADMIN="/usr/bin/mysqladmin --socket=$PYFLAG_UNIX_SOCKET"


# priority can be overriden and "-s" adds output to stderr
ERR_LOGGER="logger -p daemon.err -t /etc/init.d/pyflag -i"

# Safeguard (relative paths, core dumps..)
cd /
umask 077
export PATH=/bin:/usr/bin:/sbin

# mysqladmin likes to read /root/.my.cnf. This is usually not what I want
# as many admins e.g. only store a password without a username there and
# so break my scripts.
export HOME=$PYFLAG_CFGDIR

## Checks if there is a server running and if so if it is accessible.
#
# check_alive insists on a pingable server
# check_dead also fails if there is a lost pyflagd in the process list
#
# Usage: boolean pyflagd_status [check_alive|check_dead] [warn|nowarn]
pyflagd_status () {
	#ping mysqldb
    ping_output=`$MYADMIN ping 2>&1`; ping_alive=$(( ! $? ))
	#check to see if our db process is running
    dbps_alive=`ps aux | grep socket=$PYFLAG_UNIX_SOCKET | grep -cv 'grep'`

	#/bin/echo -e "msqld ping: $ping_alive db_process: $dbps_alive"
    
    if [ "$1" = "check_alive"  -a  $ping_alive = 1 ] ||
       [ "$1" = "check_dead"   -a  $ping_alive = 0  -a  $dbps_alive = 0 ]; then
	return 0 # EXIT_SUCCESS
    else
  	if [ "$2" = "warn" ]; then
  	    /bin/echo -e "$dbps_alive processes alive and '$MYADMIN ping' resulted in\n$ping_output\n" | $ERR_LOGGER -p daemon.debug
	fi
  	return 1 # EXIT_FAILURE
    fi
}

#
# main()
#

case "${1:-''}" in
  'start')
	# check for config file
	if [ ! -r $CONF ]; then
	  /bin/echo -e "\nWARNING: $CONF cannot be read. See README.Debian."
        fi 
	# check for /var/run/pyflagd/ which maybe have only been on a tempfs
	if [ ! -d $PYFLAG_RUNDIR ]; then
	  install --directory --owner=pyflag --group=pyflag --mode=755 $PYFLAG_RUNDIR
	fi

	# check for /var/lib/pyflag/ which maybe have only been on a tempfs
	if [ ! -d $PYFLAG_DATADIR ]; then
	  install --directory --owner=pyflag --group=pyflag --mode=755 $PYFLAG_DATADIR
	fi
	# Start daemon
	echo -n "Starting pyflag database server"
	if pyflagd_status check_alive nowarn; then
	   echo "...already running."
	else
  	    su - pyflag -c "/usr/bin/mysqld_safe --skip-networking --socket=$PYFLAG_UNIX_SOCKET --pid-file=$DB_PID_FILE --skip-grant-tables --datadir=$PYFLAG_DATADIR --log=$PYFLAG_LOG_FILE > /dev/null 2>&1 &"
		#echo "su - pyflag -c /usr/bin/mysqld_safe --skip-networking --socket=$PYFLAG_UNIX_SOCKET --pid-file=$DB_PID_FILE --skip-grant-tables --datadir=$PYFLAG_DATADIR --log=$PYFLAG_LOG_FILE > /dev/null 2>&1 &"
		
		for i in 1 2 3 4 5 6; do
                sleep 1
	        if pyflagd_status check_alive nowarn ; then break; fi
        done
	    if pyflagd_status check_alive warn; then
                echo "."
	        # Now start pyflagcheck or whatever the admin wants.
	        $PYFLAG_CFGDIR/debian-start
	    else
	        echo "...failed."
	        /bin/echo -e "\tPlease take a look at the syslog."
	    fi

	fi
	;;

  'stop')
	
	echo -n "Stopping pyflag database server: pyflagd"	
	if ! pyflagd_status check_dead nowarn; then
	  set +e
	  shutdown_out=`$MYADMIN shutdown 2>&1`; r=$?
	  set -e
	  if [ "$r" -ne 0 ]; then
	    /bin/echo -e -n "...failed.\n$shutdown_out\nKilling pyflag database server"
	    pkill -f $DB_PID_FILE
            server_down=
	    for i in 1 2 3 4 5 6 7 8 9 10; do
              sleep 1
              if pyflagd_status check_dead nowarn; then server_down=1; break; fi
        done
        if test -z "$server_down"; then pkill -9 -f $DB_PID_FILE; fi
	  fi
    fi

	if ! pyflagd_status check_dead warn; then
	  echo "...failed."
	  exit -1
	else
	  echo "."
    fi

	;;

  'restart')
	set +e; $SELF stop; set -e
	$SELF start 
	;;

  'reload'|'force-reload')
  	echo -n "Reloading pyflag database server"
	$MYADMIN reload
	echo "."
	;;

  'status')
	if pyflagd_status check_alive nowarn; then
	  $MYADMIN version
	else
	  echo "pyflag database server is stopped."
	fi
  	;;

  *)
	echo "Usage: $SELF start|stop|restart|reload|force-reload"
	exit 1
	;;
esac

