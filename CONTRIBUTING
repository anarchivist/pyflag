	F.L.A.G Forensic and Log Analysis GUI
	    http://pyflag.sourceforge.net

This document is an introduction to the flag framework for people who
wish to extent its functionallity by writing new reports, or
contributing to the flag framework.

Below is an extract from USAGE which introduces the concept of
reports:

####################################################################
Introduction to reports:

All flag functionality is provided by reports. A report is an object
responsible for performing one particular type of analysis. Examples of
reports are "View file timelines" and "TCPtrace". 

Each report belongs to a report family, example families are "Disk
Forensics" and "Log File Analysis". When you open flag in a web
browser, you will see the report families in a menu on the left of the
screen, clicking on a familiy will display the reports in that family.

A report provides a number of methods which are executed by the flag
framework, the main ones are, "form", "analysis" and "display". When
you first click on a report in the flag menu, the framework will run
the form method which is responsible for gathering any information
which is needed for that report (ie. parameters). When all parameters
have been provided by the user and the form is submitted, the
framework will execute the analysis method. This method is responsible
for doing any complex processing (if required) and caching the results
for display. The analysis report will be executed in a separate
execution thread, and the user will be notified of its progress. When
the analysis report completes, the framework will run the display
method which provides the results of the report for viewing by the
analyst. When a report has been executed, the framework will record
the event and the parameters used in the analysis. When this report is
requested again with the same parameters, the framework can skip the
analysis method and immediately display the cached results.

It is important to note that flag tries to provide a powerfull
data-mining analysis environment where reports are extensively
hyper-linked. ie. Quite often the analyst will jump from report to
report without ever encounering the form method, this is because the
hyperlinks provide all the parameters required for the report so the
framework will skip the form and go straight to the
analysis/display. In fact, some reports don't make a lot of sense to
be used directly from the main menu, for example a report might
require a TCP Session id, or a Disk Sector number. Usually these
reports are marked "hidden" and do not appear in the main menu.
####################################################################

As you may have guessed as a developer, reports are simply python
classes which inherit from the base class "Reports.report" in the
pyflag module. There are a few attributes and methods which you must
supply. Once the class is written, the file should be placed in the
plugins directory in the pyflag system plugins directory
(eg. /usr/lib/python2.3/site-packages/pyflag/plugins) and flag should
pick it up next time it is run. The most important aspect of creating
new reports is learning to use the pyflag DBO and UI APIs.

Fortunately pyflag is quite well documented using the epydoc
system. To produce html documentation for the flag framework, run the
script gendoc.sh in the pyflah source, epydoc must be installed. You
can now point a browser at pyflag/docs/index.html. Another good
starting point for flag development is the "test" report in the file
test.py in the plugins directory. It is a report which is used to test
UI features such as the tree, table and graph widgets. Finally you can
simply look at the existing reports to see how things are done.

If you are interested in contribiting to pyflag development, please use
the pyflag sourceforge lists. 
